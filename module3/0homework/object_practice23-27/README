# 23.用面向对象的形式编写一个老师角色, 并实现以下功能, 获取老师列表, 创建老师、删除老师、创建成功之后通过pickle序列化保存到文件里
# 并在下一次重启程序时能读取到创建的老师, 例如程序目录结构如下.
# .
# | -- bin /
# | | -- main.py
# 程序运行主体程序(可进行菜单选择等)
# | -- config /
# | | -- settings.py
# 程序配置(例如: 配置存储创建老师的路径相关等)
# | -- db
# 数据存储(持久化, 使得每次再重启程序时, 相关数据对应保留)
# | | -- teachers / 存储所有老师的文件
# | | -- ......
# | -- src / 程序主体模块存放
# | | -- __init__.py
# | | -- teacher.py
# 例如: 实现老师相关功能的文件
# | | -- group.py
# 例如: 实现班级相关的功能的文件
# | -- manage.py
# 程序启动文件
# | -- README.md
# 程序说明文件

# 24.根据23题, 再编写一个班级类, 实现以下功能, 创建班级, 删除班级, 获取班级列表、创建成功之后通过pickle序列化保存到文件里，并在下一次重启程序时能读取到创建的班级.

# 25.根据23 题, 编写课程类, 实现以下功能, 创建课程(创建要求如上), 删除课程, 获取课程列表

# 26.根据23题, 编写学校类, 实现以下功能, 创建学校, 删除学校, 获取学校列表

# 27.通过23题, 它们雷同的功能, 是否可以通过继承的方式进行一些优化    伪代码
# class Behavior(object):
#     def fetch(self, keyword):
#         通过
#         keyword
#         参数
#         查询出对应的数据列表
# class School(Behavior):
#     pass
#
#
# class Teacher(Behavior):
#     pass
#
#
# s = School()
# t = Teacher()
#
# s.fetch("school")
# t.fetch("teacher")